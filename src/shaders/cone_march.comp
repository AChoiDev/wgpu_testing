#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, r32f) uniform image2D outputDepth;
layout(set = 0, binding = 1) uniform utexture3D monoBitMap;
layout(set = 0, binding = 2) uniform sampler monoBitMapSampler;

layout(set = 1, binding = 0) uniform Frame {
    vec3 pos;
      int p0;
    vec3 right;             
      int p1;
    vec3 up;                
      int p2;
    vec3 forward;           
      int p3;
    float cotanHalfFov;     
      vec3 p4;
};

bool boxInBox(vec3 inputMin, vec3 inputMax, vec3 boundMin, vec3 boundMax) {
    return !(any(lessThan(inputMin, boundMin)) || any(greaterThan(inputMax, boundMax)));
}

int getBitIndex(ivec3 coords) {
  return 
      (coords.x & 1) 
    | ((coords.y & 1) << 1) 
    | ((coords.z & 1) << 2);
}

uint extractMonoBitMap(ivec3 coords, int lod) {
  int bitIndex = getBitIndex(coords);

  uint texelValue = texelFetch(usampler3D(monoBitMap, monoBitMapSampler), coords >> 1, lod).r;
  
  //get the nth bit
  return (texelValue >> bitIndex) & 1;
}


// Distance to nearest voxel
float approximateDistance(vec3 pos) {
    
    for (int m = 4 - 1; m >= -3; m--) {

        int level = max(m, 0);
        vec3 scaledPos = pos * exp2(-level);

        vec3 disp = vec3(0.5 * exp2(min(0, m)));
        vec3 minPos = scaledPos - disp;
        vec3 maxPos = scaledPos + disp;

        if (!boxInBox(minPos, maxPos, vec3(0.0), vec3(exp2(5 - level)))) {
            break;
        }

        uint inBound = 
              extractMonoBitMap(ivec3(minPos.x, minPos.y, minPos.z), level)
            + extractMonoBitMap(ivec3(maxPos.x, minPos.y, minPos.z), level)
            + extractMonoBitMap(ivec3(minPos.x, maxPos.y, minPos.z), level)
            + extractMonoBitMap(ivec3(minPos.x, minPos.y, maxPos.z), level)
            + extractMonoBitMap(ivec3(maxPos.x, maxPos.y, minPos.z), level)
            + extractMonoBitMap(ivec3(minPos.x, maxPos.y, maxPos.z), level)
            + extractMonoBitMap(ivec3(maxPos.x, minPos.y, maxPos.z), level)
            + extractMonoBitMap(ivec3(maxPos.x, maxPos.y, maxPos.z), level);

        if (inBound == 0) {
            return exp2(m - 1);
        }
    }

    return 0.0;
}

vec2 getUV(ivec2 invoc) {
    vec2 resolution = imageSize(outputDepth);
    float ratio = resolution.x / resolution.y;

    vec2 pixelCoords =  vec2(invoc * 8 + ivec2(4, 4));
    return (2.0 / (resolution.y * 8.0)) * pixelCoords - vec2(ratio, 1.0);
}

vec3 getConeRayDirection(ivec2 invoc) {
    vec3 baseDir = normalize(vec3(getUV(invoc), cotanHalfFov));

    return baseDir.x * right + baseDir.y * up + baseDir.z * forward;
}

float getConeValue(ivec2 invoc) {
    vec3 planePos = vec3(getUV(invoc), cotanHalfFov);
    float planePosSqrMag = dot(planePos, planePos);

    float resY = imageSize(outputDepth).y;

    float rSqr = 8 * 8 * (2 / (resY * resY));

    return rSqr / planePosSqrMag;
}

// "c" is the square of the tangent of half the cone's fov
// (tan(fov / 2))^2
float coneMarch(vec3 ro, vec3 rd, float c) {
    float t = 0.0;

    int i = 0;
    while (i < 99) {
        vec3 pos = ro + rd * t;

        float r = approximateDistance(pos);
        float discriminant = (r * r * (1.0 + c)) - (t * t * c);

        if (discriminant <= 0.0001) {
            break;
        }

        float tDelta = (sqrt(discriminant) - (c * t)) / (1.0 + c);

        t += tDelta;

        i++;
    }
    return t;
}

void main() {
    ivec2 invoc = ivec2(gl_GlobalInvocationID.xy);

    float coneLength = coneMarch(pos, getConeRayDirection(invoc), getConeValue(invoc));

    imageStore(outputDepth, invoc, vec4(coneLength));
}